/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit test framework.
    testImplementation libs.junit

    // JUnit 5 (Jupiter)
    testImplementation 'org.springframework.boot:spring-boot-starter-test:3.2.0'

    // This dependency is used by the application.
    implementation libs.guava

    // add lombok
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    // add jackson-databind
    //implementation 'com.fasterxml.jackson.core:jackson-databind:2.14.2'
    // logger
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.7'
    // for xmlbind
    //implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    // spring web
    implementation 'org.springframework.boot:spring-boot-starter-web:3.2.0'
    // PostConstruct
    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    // aspects
    implementation 'org.springframework.boot:spring-boot-starter-aop:3.2.0'

    testImplementation 'org.testcontainers:junit-jupiter:1.16.0'
    testImplementation "org.wiremock:wiremock-standalone:3.9.1"
    testImplementation "org.wiremock.integrations.testcontainers:wiremock-testcontainers-module:1.0-alpha-13"
    testImplementation 'io.rest-assured:rest-assured:5.4.0' // For easier HTTP testing
    implementation 'org.springframework.boot:spring-boot-starter-webflux:3.2.0'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-parameters'
}
// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'ru.tbank.App'
}
// Configure JaCoCo
jacoco {
    toolVersion = "0.8.8"
}

jacocoTestReport {
    group = "reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.required.set(false)
        csv.required.set(false)
        html.required.set(true)
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: '**/dto/**')
        }))
    }
}

test.finalizedBy jacocoTestReport

tasks.withType(Test) {
    useJUnitPlatform()
}